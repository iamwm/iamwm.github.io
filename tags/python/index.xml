<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 搬砖工的日常</title>
    <link>https://rgozi.com/tags/python/</link>
    <description>Recent content in python on 搬砖工的日常</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 01 Jul 2021 09:27:12 +0000</lastBuildDate><atom:link href="https://rgozi.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>asyncio loop的运行循环</title>
      <link>https://rgozi.com/post/11-asyncio-loop%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Thu, 01 Jul 2021 09:27:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/11-asyncio-loop%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;通过&lt;code&gt;run_forever&lt;/code&gt;或&lt;code&gt;run_until_complete&lt;/code&gt;方法可以让我们完成初始化的loop &lt;strong&gt;run&lt;/strong&gt;起来。&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;run_until_complete&lt;/code&gt;是将需要执行的函数&amp;quot;Task&amp;quot;化之后再调用&lt;code&gt;run_forever&lt;/code&gt;，而&lt;code&gt;run_forever&lt;/code&gt;真正将loop **&lt;!-- raw HTML omitted --&gt;loop&lt;!-- raw HTML omitted --&gt;**起来是通过&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_run_once&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_stopping&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;来实现的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asyncio default loop 初始化流程(基于python3.6)</title>
      <link>https://rgozi.com/post/10-asyncio-loop%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Fri, 01 Jan 2021 09:27:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/10-asyncio-loop%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;通过简单的代码，就可以一窥asyncio event loop的初始化流程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;asyncio&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;asyncio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_event_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;loop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run_forever&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上边简单的几行代码，牵涉到event loop的初始化以及运行的全部过程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>asyncio的前世今生</title>
      <link>https://rgozi.com/post/1asyncio%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link>
      <pubDate>Wed, 01 Jul 2020 09:27:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/1asyncio%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid>
      <description>&lt;p&gt;在提到python的asyncio的时候，我们会联想到async/await，event loop，coroutine，selector，Task，Future等等相关的内容，那么asyncio到底是谁(asyncio本身)，它从哪里来的(为什么需要asyncio)，要到哪里去(它能够解决什么问题)呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>离线环境python项目的部署</title>
      <link>https://rgozi.com/post/%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83python%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 24 Oct 2017 15:27:54 +0000</pubDate>
      
      <guid>https://rgozi.com/post/%E7%A6%BB%E7%BA%BF%E7%8E%AF%E5%A2%83python%E9%A1%B9%E7%9B%AE%E7%9A%84%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;p&gt;最近自己参与的一个项目接近尾声，需要把代码部署到甲方提供的服务器。本来想着没有什么困难，谁知道甲方提供的服务器需要连接到vpn堡垒机之后才能连接，并且服务器是不能与外网直接连接的。知道真相的我眼泪掉下来。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>proxy在爬虫中的使用姿势</title>
      <link>https://rgozi.com/post/proxy%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Mon, 28 Aug 2017 13:23:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/proxy%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/</guid>
      <description>&lt;p&gt;通过爬虫获取数据会经常被服务器ban掉ip，所以有个有效的proxy pool十分必要。这几天在爬网易云音乐的用户数据，顺便搞了个&lt;a href=&#34;https://github.com/love3forever/proxyHunter&#34;&gt;proxyhunter&lt;/a&gt;，并且尝试发布成pip包：&lt;a href=&#34;https://pypi.python.org/pypi/proxyhunter/0.0.1&#34;&gt;proxyhunter&lt;/a&gt;，方便以后的使用。下面主要说下&lt;!-- raw HTML omitted --&gt;requests&lt;!-- raw HTML omitted --&gt;在进行请求的时候，proxy如何设置，以及我这个proxyhunter如何使用。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python魔术方法指南[转]</title>
      <link>https://rgozi.com/post/python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E6%8C%87%E5%8D%97/</link>
      <pubDate>Tue, 22 Aug 2017 09:23:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;转自&lt;a href=&#34;http://pycoders-weekly-chinese.readthedocs.io/en/latest/issue6/a-guide-to-pythons-magic-methods.html&#34;&gt;Python 魔术方法指南&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>对象引用、可变性[流畅的Python]</title>
      <link>https://rgozi.com/post/fluent_python_chapter8/</link>
      <pubDate>Sun, 20 Aug 2017 23:23:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/fluent_python_chapter8/</guid>
      <description>&lt;p&gt;记录一下在读《流程的python》时对自己有用的知识点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Iterables,Iterators和Generators</title>
      <link>https://rgozi.com/post/iterablesiterators%E5%92%8Cgenerators/</link>
      <pubDate>Thu, 10 Aug 2017 19:23:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/iterablesiterators%E5%92%8Cgenerators/</guid>
      <description>&lt;p&gt;最近一段时间都在研究python里边的一些概念:&lt;!-- raw HTML omitted --&gt;iterator,iterable和generator&lt;!-- raw HTML omitted --&gt;.看到&lt;a href=&#34;http://nvie.com/posts/iterators-vs-generators/&#34;&gt;这篇文章&lt;/a&gt;写的十分不错,基本上讲清楚了这三个东西都是什么以及他们之间的关系.这当然值得记录一下😊.
所谓一图胜千言,这篇文章中的这个关系图让人一目了然.
&lt;img src=&#34;https://rgozi.com/pics/relationships.png&#34; alt=&#34;relationships.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python的itertools[读文档]</title>
      <link>https://rgozi.com/post/python%E7%9A%84itertools/</link>
      <pubDate>Wed, 09 Aug 2017 19:23:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/python%E7%9A%84itertools/</guid>
      <description>&lt;p&gt;python的itertools库受到了来自APL, Haskell和SML的灵感，并且用最适合python语言特性的形式重构。它差不多可以说是定义了一套高效、节省内存的方法使用纯python来构建开发者所需要的各种不同迭代器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>python中@classmethod和@staticmethod的理解</title>
      <link>https://rgozi.com/post/%E5%85%B3%E4%BA%8Epython%E7%9A%84classmethod%E5%92%8Cstaticmethod%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Thu, 03 Aug 2017 11:31:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/%E5%85%B3%E4%BA%8Epython%E7%9A%84classmethod%E5%92%8Cstaticmethod%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;一直对python中@classmethod和@staticmethod的用法和区别不是很理解,一顿google之后发现还是stackoverflow真的是程序员的好朋友.在这个问题&lt;a href=&#34;https://stackoverflow.com/questions/12179271/meaning-of-classmethod-and-staticmethod-for-beginner&#34;&gt;Meaning of @classmethod and @staticmethod for beginner?&lt;/a&gt;中,几个大神的回答还是很好的.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>近期的一些总结</title>
      <link>https://rgozi.com/post/%E6%9C%80%E8%BF%91%E5%85%B3%E4%BA%8Epython%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 09 Jul 2017 12:38:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/%E6%9C%80%E8%BF%91%E5%85%B3%E4%BA%8Epython%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;昨天看到自己手机上wunderlist上的提示“精通python”，任务是去年同一时间建立的。那时候我才刚刚毕业，还没去单位报道，在家里找了个练手项目，逐步学习python相关的东西：爬虫、web框架、机器学习等各方面，那时候想着要是用一年的时间好好来学，应该可以达到精通的程度了。
现在回过头来看，虽然没有达到自己预想的“精通”，但这一年还算充实，至少不是虚度时光，单是针对python相关的东西，自己也是从方方面面用了不少时间来学习、练习、思考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>requests库的Failed to establish a new connection</title>
      <link>https://rgozi.com/post/requests%E5%BA%93error/</link>
      <pubDate>Sun, 29 Jan 2017 11:11:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/requests%E5%BA%93error/</guid>
      <description>&lt;p&gt;使用python做爬虫的过程中，经常会在较短的时间内构建大量的连接向服务器请求数据，遇到了这样的问题：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;requests.exceptions.ConnectionError: HTTPConnectionPool(host=&amp;#39;xxx&amp;#39;, port=80):
Max retries exceeded with url: /document/record/_search?pretty=true (Caused by NewConnectionError
(&amp;#39;&amp;lt;requests.packages.urllib3.connection.HTTPConnection object at 0x7f544af9a5d0&amp;gt;: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution&amp;#39;,))
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>mongodb用户名密码登录</title>
      <link>https://rgozi.com/post/mongodb%E5%B8%A6%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 17 Jan 2017 11:11:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/mongodb%E5%B8%A6%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;写这篇博客是为了纪念最近闹的沸沸扬扬的大规模mongodb库被黑的事件，我自己也不幸中招，索性被黑的数据都是自己做试验的一些数据，并不是很重要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>flask-socketio的一次使用记录</title>
      <link>https://rgozi.com/post/flask-socketio%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E7%BB%8F%E5%8E%86/</link>
      <pubDate>Wed, 28 Dec 2016 16:11:12 +0000</pubDate>
      
      <guid>https://rgozi.com/post/flask-socketio%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E7%BB%8F%E5%8E%86/</guid>
      <description>&lt;p&gt;最近在做一个小项目，其中一部分即时通信的功能我是通过flask-socketio来完成的后端代码编写。在尝试过程中遇到了一些问题，特在此记录，以备后用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
